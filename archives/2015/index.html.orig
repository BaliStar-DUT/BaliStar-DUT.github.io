
<!DOCTYPE html>
<html lang="en">
    
<head>
    <meta http-equiv="Content-Type" content="text/html" charset="UTF-8" >
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="generator" content="James&#39; blog">
    <title>Archives: 2015 - James&#39; blog</title>
    <meta name="author" content="James Yang">
    
        <link rel="icon" href="/assets/images/favicon.ico">
    
    
    <meta name="description">
<meta property="og:type" content="blog">
<meta property="og:title" content="James' blog">
<meta property="og:url" content="http://balistardut.github.io/archives/2015/index.html">
<meta property="og:site_name" content="James' blog">
<meta property="og:description">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="James' blog">
<meta name="twitter:description">
<meta name="twitter:creator" content="@Libra">
    
    
    
        <meta property="og:image" content="/assets/images/head.png"/>
    
    
    
    
    <!--STYLES-->
    <link rel="stylesheet" href="/assets/css/style.min.css" type="text/css">
    <!--STYLES END-->
    
</head>

    <body>
        <div id="blog">
            <!-- Define author's picture -->


<header id="header" data-behavior="1">
    <i id="btn-open-sidebar" class="fa fa-lg fa-bars"></i>
    <h1 class="header-title">
        <a class="header-title-link" href="/ ">James&#39; blog</a>
    </h1>
    
        
            <a  class="header-right-icon "
                href="/#about">
        
        
            <i class="fa fa-lg fa-question"></i>
        
        </a>
    
</header>

            <!-- Define author's picture -->



        
    

<nav id="sidebar" data-behavior="1">
    
        <div class="sidebar-profile">
            <a href="/#about">
                    <img class="sidebar-profile-picture" src="/assets/images/head.png"/>
            </a>
            <span class="sidebar-profile-name">James Yang</span>
        </div>
    
    
        <ul class="sidebar-buttons">
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link "
                         href="/ "
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-home"></i>
                    <span class="sidebar-button-desc">Home</span>
                </a>
        </li>
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link "
                         href="/all-categories"
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-bookmark"></i>
                    <span class="sidebar-button-desc">Categories</span>
                </a>
        </li>
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link "
                         href="/all-tags"
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-tags"></i>
                    <span class="sidebar-button-desc">Tags</span>
                </a>
        </li>
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link "
                         href="/all-archives"
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-archive"></i>
                    <span class="sidebar-button-desc">Archives</span>
                </a>
        </li>
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link st-search-show-outputs"
                         href="/#search"
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-search"></i>
                    <span class="sidebar-button-desc">Search</span>
                </a>
        </li>
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link "
                         href="/#about"
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-question"></i>
                    <span class="sidebar-button-desc">About me</span>
                </a>
        </li>
        
    </ul>
    
        <ul class="sidebar-buttons">
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link " href="https://github.com/BaliStarDUT" target="_blank">
                
                    <i class="sidebar-button-icon fa fa-lg fa-github"></i>
                    <span class="sidebar-button-desc">GitHub</span>
                </a>
        </li>
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link " href="mailto:drawnkid@gmail.com" target="_blank">
                
                    <i class="sidebar-button-icon fa fa-lg fa-envelope-o"></i>
                    <span class="sidebar-button-desc">Mail</span>
                </a>
        </li>
        
    </ul>
    
        <ul class="sidebar-buttons">
        
            <li class="sidebar-button">
                
                    <a  class="sidebar-button-link "
                         href="/atom.xml"
                        
                    >
                
                    <i class="sidebar-button-icon fa fa-lg fa-rss"></i>
                    <span class="sidebar-button-desc">RSS</span>
                </a>
        </li>
        
    </ul>
    
</nav>

            
            <div id="main" data-behavior="1"
                 class="
                        hasCoverMetaIn
                        ">
                
    

<section class="postShorten-group main-content-wrap">
    
        
        <article class="postShorten postShorten--thumbnailimg-left" itemscope itemType="http://schema.org/BlogPosting">
            <div class="postShorten-wrap">
                <div class="postShorten-header">
                    <h1 class="postShorten-title" itemprop="headline">
                        
                                <a class="link-unstyled" href="/2015/12/10/hello-world/">Hello World</a>
                        
                    </h1>
                    <div class="postShorten-meta">
    <time itemprop="datePublished" content="Thu Dec 10 2015 12:45:59 GMT+0800">
	
		    Dec 10, 2015
    	
    </time>
    
</div>
                </div>
                
                
                    <div class="postShorten-excerpt" itemprop="articleBody">
                        <p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>
                        
                            <a href="/2015/12/10/hello-world/" class="postShorten-excerpt_link link">
                                Continue reading
                            </a>
                            
                        
                    </div>
                
            </div>
            
                <div class="postShorten-thumbnailimg">
                    <img alt="" itemprop="image" src="http://balistardut.github.io/2015/12/10/hello-world/head.png"/>
                </div>
                
            
        </article>
    
        
        <article class="postShorten postShorten--thumbnailimg-right" itemscope itemType="http://schema.org/BlogPosting">
            <div class="postShorten-wrap">
                <div class="postShorten-header">
                    <h1 class="postShorten-title" itemprop="headline">
                        
                                <a class="link-unstyled" href="/2015/11/30/java-web之JSP/">java web之JSP</a>
                        
                    </h1>
                    <div class="postShorten-meta">
    <time itemprop="datePublished" content="Mon Nov 30 2015 18:06:54 GMT+0800">
	
		    Nov 30, 2015
    	
    </time>
    
        <span>in </span>
        
    <a class="category-link" href="/categories/Diary/">Diary</a>


    
</div>
                </div>
                
                
                    <div class="postShorten-excerpt" itemprop="articleBody">
                        <h1 id="一-_JSP内置对象">一. JSP内置对象</h1><h2 id="1-1_response对象">1.1 response对象</h2><p>它是HttpServletResponse类的实例。常用方法有：</p>
<ol>
<li>String getCharacterEncoding()//返回响应用的是何种字符编码</li>
<li>void setContentType(String type) //返回响应的MIME类型</li>
<li><p>PrintWriter getWriter() //返回可以向客户端输出字符的对象（注意：PrintWriter与内置out对象的区别,PrintWriter类型的对象会先于out对象输出到浏览器，因为out有一个缓存，不满就不会调用flush方法清空缓存，所以会后面输出，但是可以提前调用flush来提前刷新缓存）</p>
                        
                            <a href="/2015/11/30/java-web之JSP/" class="postShorten-excerpt_link link">
                                Continue reading
                            </a>
                            
                        
                    </div>
                
            </div>
            
        </article>
    
        
        <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
            <div class="postShorten-wrap">
                <div class="postShorten-header">
                    <h1 class="postShorten-title" itemprop="headline">
                        
                                <a class="link-unstyled" href="/2015/11/30/LNMP架构搭建与优化/">LNMP架构搭建与优化</a>
                        
                    </h1>
                    <div class="postShorten-meta">
    <time itemprop="datePublished" content="Mon Nov 30 2015 17:14:18 GMT+0800">
	
		    Nov 30, 2015
    	
    </time>
    
</div>
                </div>
                
                
                    <div class="postShorten-content" itemprop="articleBody">
                        <h2 id="1-1_Mysql安装">1.1 Mysql安装</h2><ol>
<li>下载mysql安装包，解压 </li>
<li>添加mysql用户：useradd -s /sbin/nologin -M myql  </li>
<li>移动并重命名：mv mysql-linux /usr/local/mysql</li>
<li>创建目录：mkdir -p /data/mysql;chown -R mysql /data/mysql</li>
<li>安装参数：./scripts/mysql_install_db –user=mysql –datadir=/data/mysql</li>
<li>配置文件：/etc/my.conf</li>
<li>添加服务：chkconfig –add mysqld</li>
<li>启动服务：chkconfig mysqld on</li>
<li>启动程序：/etc/init.d/mysqld start</li>
<li>检查是否启动：ps aux | grep mysql </li>
<li>检查端口：netstat -lnp | gerp mysql<h2 id="1-2_apache编译安装">1.2 apache编译安装</h2></li>
<li>.configure //检查环境 echo $? //显示上一条命令执行结构，非0则有错</li>
<li>make //编译</li>
<li>make install //安装 ，每一步都建议echo $?</li>
<li>/usr/local/apache2/bin/apachectl start //用于启动apache </li>
<li>/usr/local/apache2/bin/apachectl restart //用于重新启动apache</li>
<li>/usr/local/apache2/bin/apachectl stop //用于关闭apache </li>
<li>/usr/local/apache2/bin/apachectl graceful //用于重新加载配置文件</li>
<li>还有选项 -M,查看apache启动时加载的模块, 有静态加载的模块，和动态加载的模块<br>-l ,列出静态加载的模块<br>-t，检查配置文件有无错误</li>
<li>查看进程：ps aux |gerp httpd</li>
<li>查看端口：netstat -lnp | grep httpd</li>
<li>apache的工作模式，最常用的有worker或prefork，默认是event模式<h2 id="1-3_apache的mpm工作模式">1.3 apache的mpm工作模式</h2></li>
<li>prefork worker event//三种常用工作模式</li>
<li>prefork下有主进程和子进程，可以通过ps aux | grep httpd来看</li>
<li>worker下有主进程和子进程，还有线程，对高并发支持比较好</li>
<li>event 是worker的升级版，有线程，性能方面，保持长连接方面更有优势<h2 id="1-4_php编译安装">1.4 php编译安装</h2></li>
<li>下载解压 tar jxf php.tar.bz2</li>
<li>yum添加源：rpm -ivh “<a href="http://www源地址" target="_blank" rel="external">http://www源地址</a>“ //-i 不区分大小写</li>
<li>/usr/local/php/bin/php -m //列出静态加载的模块</li>
<li>/usr/local/php/bin/php  -i //配置信息<h2 id="1-5_测试php解析">1.5 测试php解析</h2></li>
<li>需要加载php解析模块，apache才能解析php页面 </li>
<li>安装php后php自带解析php文件的可执行文件，php a.php 即可解析页面</li>
<li>编辑配置文件，在modls配置项上加上php，在dir配置项上加上.php，这样就能识别php文件 </li>
<li>之后检测apache配置文件是否正确：apachectl -t</li>
<li>之后重新加载配置文件：apache graceful</li>
<li>php中的phpinfo()函数将列出php的相关信息，与php -i输出信息一致，里面将列出php的编译信息。</li>
<li>apache的编译信息在/usr/local/apache2/build/config.nice中</li>
<li>mysql的编译信息在/usr/local/mysql/bin/mysqlbug中</li>
<li>用curl命令也能测试php是否安装成功，curl <a href="http://localhost/php.info" target="_blank" rel="external">http://localhost/php.info</a><h2 id="1-6_安装Discuz!">1.6 安装Discuz!</h2></li>
<li><p>如果apache出现如下错误：</p>
<p> root@yangz-CW65:/home/yangz# /etc/init.d/apache2 restart<br>  * Restarting web server apache2                                                AH00558: apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.0.1. Set the ‘ServerName’ directive globally to suppress this message</p>
</li>
</ol>
<p>这是ServerName没有配置的原因，在配置文件中添加ServerName www.yang.com即可</p>
<ol>
<li><h2 id="1-7_apache用户认证">1.7 apache用户认证</h2></li>
<li><p>如果想要服务器上某个文件或目录不被外界访问，或只能输入用户名密码访问，则可以在虚拟主机下配置这样的描述：</p>
<pre><code>&lt;Directory <span class="regexp">/var/</span>www<span class="regexp">/html/</span>phpMyAdmin-<span class="number">4.2</span><span class="number">.0</span>-all-languages/&gt;
     AllowOverride AuthConfig
     AuthName <span class="string">"ADMIN"</span> <span class="comment">//该字符串为浏览器的提示信息</span>
     AuthType Basic
     AuthUserFile <span class="regexp">/var/</span>www/.htpasswd
     require valid-user
 &lt;/Directory&gt;
</code></pre></li>
<li><p>改变PATH环境变量的值：可以在/etc/profile.d/下增加以.sh为结尾的shell脚本文件，文件中添加如下内容：</p>
<p>  #! /bin/bash<br>  export PATH=$PATH:/usr/local/mysql/bin:/usr/local/apache2/bin<br>这样在PATH环境变量下添加了两个目录，之后用命令：source /etc/profile.d/path.sh 就可以将改动加载到环境中。</p>
</li>
<li><p>创建用户密码文件/var/www/.htpasswd: 需要用到apache下的命令htpasswd.</p>
<p> <code>htpasswd -c /var/www/.htpasswd username</code> //-c表示create，后面跟文件名，用户名。之后它将提示输入密码。将保存到该文件，查看该文件，内容为username:$密码加密后的内容。<br> 如果想添加另一个用户，不需要-c选项，直接<code>htpasswd /var/www/.htpasswd username</code>就可以了。</p>
</li>
<li><p>重新加载apache配置文件：<code>apachectl graceful</code> 即可。</p>
</li>
<li>再次访问该目录是浏览器将要求输入用户名和密码,并且apache默认将不会列出此目录<h2 id="1-8_默认虚拟主机">1.8 默认虚拟主机</h2></li>
<li>apache有一个默认的虚拟主机，只要将域名指向该ip的主机，就会默认访问配置文件中的第一个虚拟主机。通过ip方式访问的也是第一个虚拟主机。</li>
<li>所以有些人可以通过不用你的域名，但是指向你的ip来访问你的网站。我们可以通过设置第一个虚拟主机，就是默认虚拟主机为不存在的目录来拒绝这种访问。这样，只有我们服务器配置的域名可以访问到后面的真实主机，而不匹配的域名会访问默认主机，而默认主机不存在，所以就无法访问。</li>
<li>在配置文件中在第一个virtualhost前再添加一个virtualhost就能设置为默认虚拟主机。这样，即使通过ip也无法访问正确的虚拟主机。<h2 id="1-9_域名301跳转">1.9 域名301跳转</h2></li>
<li>如果两个域名同时指向了同一个主机，那么可以通过域名跳转来实现两个域名访问同一个主机。</li>
<li><p><a href="http://www.apelearn.com/bbs/thread-603-1-1.html" target="_blank" rel="external">apache 的域名重定向</a><br>需求：要把访问域名 www.domain1.com 的域名转发到 www.domain2.com 上<br>实现：<br>在相关的虚拟主机中增加</p>
<pre><code><span class="tag">&lt;IfModule mod_rewrite.c&gt;</span>
    <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span>
    <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%{HTTP_HOST}</span> ^www.domain1.com$
    <span class="keyword"><span class="common">RewriteRule</span></span> ^(.*)$ http://www.domain2.com/<span class="number">$1</span><span class="sqbracket"> [R=301,L]</span>
<span class="tag">&lt;/IfModule&gt;</span>
</code></pre></li>
</ol>
<p>如果是多个域名重定向到一个域名</p>
<pre><code><span class="tag">&lt;IfModule mod_rewrite.c&gt;</span>
    <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">on</span>
    <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%{HTTP_HOST}</span> ^www.domain.com<span class="sqbracket"> [OR]</span>
    <span class="keyword"><span class="common">RewriteCond</span></span> <span class="cbracket">%{HTTP_HOST}</span> ^www.domain1.com$
    <span class="keyword"><span class="common">RewriteRule</span></span> ^(.*)$ http://www.domain2.com/<span class="number">$1</span><span class="sqbracket"> [R=301,L]</span>
<span class="tag">&lt;/IfModule&gt;</span>
</code></pre><h2 id="2-0_apache日志切割">2.0 apache日志切割</h2><ol>
<li>临时设定当前系统日期：date -s “2015-11-11 11:11:11”</li>
<li>日志格式可以自定义，默认的有combined 或common</li>
<li>日志分为访问access日志和错误error日志</li>
<li><h2 id="2-1_apache不记录指定类型日志">2.1 apache不记录指定类型日志</h2></li>
<li>像网页中的小图片访问日志不用记录，所有有这样的需求</li>
<li><h2 id="2-2_apache配置静态缓存">2.2 apache配置静态缓存</h2></li>
<li>可以配置服务器资源在浏览器的缓存时间时间，这样可以节省流量资源。</li>
<li>需要配置apache的主配置文件，需要加载的模块是expires</li>
<li>在配置文件中加入如下配置：<br> `<ifmodoule mod_expires.c=""><pre><code>ExpriesActive on
ExpriesByType <span class="keyword">image</span>/gif <span class="string">"access plus 1 days "</span> 
ExpriesByType <span class="keyword">image</span>/jpeg <span class="string">"access plus 24 hours"</span> <span class="comment">//缓存214小时</span>
ExpriesByType <span class="keyword">image</span>/png <span class="string">"access plus 5 hours"</span>
ExpriesByType <span class="keyword">text</span>/css <span class="string">"now plus 2 hours"</span>
ExpriesByType application/x-javascript <span class="string">"now plus 2 days"</span>
ExpriesByType application/x-shockwave-flash <span class="string">"now plus 2 days"</span>
ExpriesDefault <span class="string">"now plus 0 min"</span> <span class="comment">//其余默认不缓存</span>
</code></pre> `</ifmodoule></li>
<li>检查配置文件后重启apache</li>
<li>可以通过curl来查看资源的缓冲情况</li>
</ol>
<blockquote>
<p>root@yangz-CW65:/etc/apache2/sites-available# curl -x127.0.0.1:80 ‘<a href="http://www.yang.me/nutch/img/lang/brazil.png" target="_blank" rel="external">http://www.yang.me/nutch/img/lang/brazil.png</a>‘ -I<br>HTTP/1.1 200 OK<br>Date: Thu, 12 Nov 2015 15:32:40 GMT<br>Server: Apache/2.4.10 (Ubuntu)<br>Last-Modified: Mon, 23 Mar 2009 12:51:44 GMT<br>ETag: “2d5-465c8ba853800”<br>Accept-Ranges: bytes<br>Content-Length: 725<br>Cache-Control: max-age=86400 //这里就是我们设置的缓存时间<br>Expires: Fri, 13 Nov 2015 15:32:40 GMT<br>Content-Type: image/png</p>
</blockquote>
<h2 id="2-3_Apache配置防盗链">2.3 Apache配置防盗链</h2><ol>
<li>网站上的资源可以被放到别人的网站上，这会增大你的服务器的流量，增加服务器负担，所以要防止盗链，盗取你的图片，视频等。</li>
<li><p>在配置文件中配置，当从其他地方访问你指定的资源时，将不能访问，出现错误</p>
<p> `SetEnvIfNoCase Referer “^<a href="http://.*\.yang\.com" target="_blank" rel="external">http://.*\.yang\.com</a>“ local_ref<br> SetEnvIfNoCase Referer “.*.yang.me” lcal_re’f<br> <filesmatch "^\.{hr|txt|doc|mp3|zip|rar|jpg|gif|png|js|css}"=""></filesmatch></p>
<pre><code><span class="keyword">Order</span> <span class="title">Allow</span>,<span class="operator">Deny</span> 
Allow from <span class="variable">env=</span>local_ref
</code></pre><p>  #Require all denied<br> <filesmatch>`</filesmatch></p>
</li>
</ol>
<h2 id="2-4_apache访问控制">2.4 apache访问控制</h2><ol>
<li><h2 id="2-6_apache禁止指定user_agent访问">2.6 apache禁止指定user_agent访问</h2></li>
<li><h2 id="2-8_php-ini配置文件详解">2.8 php.ini配置文件详解</h2></li>
<li>可以通过curl -x127.0.0.1:8080 www.test.com/form.php -T 来查看返回的状态码信息</li>
<li>/usr/local/php/bin/php -i //显示php配置信息，显示php配置文件在哪里</li>
<li>/usr/local/php/etc/php.ini //php的配置文件</li>
<li>disable functions = //需要禁止使用的函数</li>
<li>display errors = On //配置错误日志是否显示</li>
<li>error log = /usr/local/php/logs/php_errors.log//最好写绝对路径，配置错误日志的输出文件，该文件的权限最好改为777，因为写文件的用户是apache</li>
<li>error reporting = //配置日志的显示级别</li>
<li>open basedir = //限定apache访问在某些目录下，需要设定为自己的web根目录<h2 id="2-9_php扩展模块如何安装">2.9 php扩展模块如何安装</h2></li>
<li>动态加载模块可以在php.ini中配置</li>
<li>安装完php后如果发现某些模块没有安装，方法有：1.卸载重新安装php 2.动态加载模块</li>
<li>可以下载模块源码包，自己编译加载</li>
<li>例如编译curl，进入curl源码目录下</li>
<li>/usr/local/php/bin/phpize  //运行将生成configure文件</li>
<li>./configure –with-php-config=/usr/local/php/bin/php-config //执行编译参数</li>
<li>make install //编译产生二进制文件，将显示curl.so的位置</li>
<li>php的extension dir表示模块加载目录，在php.ini中配置，可以通过php -i | grep extension_dir来发现</li>
<li>在extension中加入：extension=curl.so //配置完成后将动态加载此模块</li>
<li>在vim 中 nohl是不显示高亮</li>
<li>php -m //显示加载的模块</li>
<li>可以通过查看php的错误日志来查看错误原因. .<h2 id="3-0_mysql配置讲解">3.0 mysql配置讲解</h2></li>
<li>mysql的配置文件在/etc/my.cnf中，核心配置是mysqld部分</li>
<li>key_buffer_size://mysql的buffer size</li>
<li>mysql中可以用：SHOW STATUS LIKE ‘key_read%’来查看配置</li>
<li>mysql的常用引擎有myisam和inodb引擎</li>
<li>慢查询：long_query_time = 1 和 log_slow_queries= /data/mysql/slow.log //设置查询时间超过1秒的查询记录到慢查询日志中<h2 id="3-1_mysql_root密码重置">3.1 mysql root密码重置</h2></li>
<li>mysql 默认不加密码，可以直接用mysql -u root 登陆</li>
<li>mysqladmin -u root password ‘yangzhenmysql’ //给root设置密码</li>
<li>编辑配置文件my.conf,在其后加入一句：skip-grant </li>
<li>重启mysql：/etc/init.d/mysqld restart 又可以直接mysql登陆了</li>
<li>然后use mysql数据库，修改root密码。</li>
<li>运行sql语句：update user set password=password(‘yangzhen’) where user=’root;//这样就重置了root用户的密码</li>
<li>‘修改配置文件删除增加的那一行，重启，然后就需要用新密码登陆<h2 id="3-2_mysql远程登陆">3.2 mysql远程登陆</h2></li>
<li>远程登陆mysql：mysql -h192.168.1.10 -P3306 -uroot -pyang //-P指定端口</li>
<li>在mysql中执行：grant all on <em>.</em> to ‘root’@’192.168.0.1’ identified by ‘123456’ //授权给root在指定host上用指定密码登陆，并且能访问所有数据库的所有数据表。</li>
<li>在mysql数据库中执行select * from user where host=’192.168.0.1’\G;’将可以看到已经授权访问的客户端</li>
<li>就可以用2中的命令登陆，-p应该是123456</li>
<li>select user();可以显示当前登陆的用户</li>
<li>本地如果有多个mysql可以用socket登陆：mysql -uroot -S /tmp/mysql.sock -p 输入密码就能登陆，-S指定socket，就是配置文件中的socket<h2 id="3-3_mysql常用操作1">3.3 mysql常用操作1</h2></li>
<li>show databases;//显示有多少数据库</li>
<li>use mysql; //切换数据库</li>
<li>select database(); //显示当前数据库</li>
<li>select user(); //显示当前用户</li>
<li>select version(); //</li>
<li>show tables;<h2 id="3-5_mysql备份与恢复">3.5 mysql备份与恢复</h2></li>
<li>备份数据库可以用mysqldump：mysqldump -uroot -pyangzhen mysql &gt;mysql.sql//将备份数据库到文件中，也可以不重定向，将打印出备份信息，该文件是可读的，内容是先创建数据表，然后插入数据，这将备份整个数据库</li>
<li>可以通过上面的文件来恢复：mysql -uroot -pyang mysql &lt;mysql.sql //恢复数据库，反向重定向到数据库恢复，这将恢复整个数据库</li>
<li>备份数据表可以：mysqldump -uroot -pyangzhen mysql user&gt;mysqluser.sql //这将备份mysql数据库的user表到文件中，cat!$ 将显示结果。与备份数据库内容一样</li>
<li>！/et //将运行上一条/et开头的命令</li>
<li>恢复数据表可以：mysql -uroot -pyang mysql &lt;mysql.sql //不需要加表名</li>
<li>字符集问题，备份恢复时可能会产生乱码问题：备份时指定字符集为utf8：mysqldump -uroot -pyangzhen –default-character-set=utf8 mysql user&gt;mysqluser.sql</li>
<li>恢复时指定字符集：mysql -uroot -pyang –default-character-set=utf8 mysql &lt;mysql.sql </li>
<li></li>
</ol>

                        
                            

                        
                        
                            <p>
                                <a href="/2015/11/30/LNMP架构搭建与优化/#post-footer" class="postShorten-excerpt_link link">
                                    Comment and share
                                </a>
                            </p>
                        
                    </div>
                
            </div>
            
        </article>
    
        
        <article class="postShorten postShorten--thumbnailimg-right" itemscope itemType="http://schema.org/BlogPosting">
            <div class="postShorten-wrap">
                <div class="postShorten-header">
                    <h1 class="postShorten-title" itemprop="headline">
                        
                                <a class="link-unstyled" href="/2015/11/30/Shell编程进阶/">Shell编程进阶</a>
                        
                    </h1>
                    <div class="postShorten-meta">
    <time itemprop="datePublished" content="Mon Nov 30 2015 17:04:35 GMT+0800">
	
		    Nov 30, 2015
    	
    </time>
    
</div>
                </div>
                
                
                    <div class="postShorten-excerpt" itemprop="articleBody">
                        <h2 id="1-1_shell脚本">1.1 shell脚本</h2><ol>
<li>shell脚本是使用linux中的命令来形成某些功能。它有一定的语法规则，可以再linux下直接运行，可以实现自动化运维。</li>
<li>用人单位都要求会shell脚本<h2 id="1-2_shell结构以及执行">1.2 shell结构以及执行</h2></li>
<li>首行：#!/bin/bash</li>
<li>注释：#脚本作用，时间，作者</li>
<li>执行：bash a.sh或./a.sh或sh a.sh</li>
<li>sh -x first.sh//查看脚本执行过程
                        
                            <a href="/2015/11/30/Shell编程进阶/" class="postShorten-excerpt_link link">
                                Continue reading
                            </a>
                            
                        
                    </div>
                
            </div>
            
        </article>
    
    <div class="pagination-bar">
    <ul class="pagination">
        
        
        <li class="pagination-number">page 1 of 1</li>
    </ul>
</div>

</section>



                <footer id="footer" class="main-content-wrap">
    <span class="copyrights">
        Copyrights &copy; 2015 James Yang. All Rights Reserved.
    </span>
</footer>

            </div>
            
        </div>
        <!-- Define author's picture -->


    
        
    

<div id="about">
    <div id="about-card">
        <div id="about-btn-close">
            <i class="fa fa-remove"></i>
        </div>
        
            <img id="about-card-picture" src="/assets/images/head.png"/>
        
            <h4 id="about-card-name">James Yang</h4>
        
            <h5 id="about-card-bio"><p>like LOL</p>
</h5>
        
        
            <h5 id="about-card-job">
                <i class="fa fa-briefcase"></i>
                <br/>
                <p>Software developer</p>

            </h5>
        
        
            <h5 id="about-card-location">
                <i class="fa fa-map-marker"></i>
                <br/>
                Beijing
            </h5>
        
    </div>
</div>

        
<div id="cover" style="background-image:url('/assets/images/cover3.png');"></div>
    </body>
    <!--SCRIPTS-->
<script src="/assets/js/script.min.js" type="text/javascript"></script>
<!--SCRIPTS END-->



</html>
